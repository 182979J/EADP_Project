//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MyProject.SMSWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SMSSoap", Namespace="WS")]
    public partial class SMS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMessagesStatusToUnreadOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SMS() {
            this.Url = global::MyProject.Properties.Settings.Default.MyProject_SMSWebReference_SMS;

            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendMessageCompletedEventHandler sendMessageCompleted;
        
        /// <remarks/>
        public event receiveMessageCompletedEventHandler receiveMessageCompleted;
        
        /// <remarks/>
        public event setMessagesStatusToUnreadCompletedEventHandler setMessagesStatusToUnreadCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WS/sendMessage", RequestNamespace="WS", ResponseNamespace="WS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendMessage(string SMSAccount, string Pwd, string Mobile, string Message) {
            object[] results = this.Invoke("sendMessage", new object[] {
                        SMSAccount,
                        Pwd,
                        Mobile,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendMessageAsync(string SMSAccount, string Pwd, string Mobile, string Message) {
            this.sendMessageAsync(SMSAccount, Pwd, Mobile, Message, null);
        }
        
        /// <remarks/>
        public void sendMessageAsync(string SMSAccount, string Pwd, string Mobile, string Message, object userState) {
            if ((this.sendMessageOperationCompleted == null)) {
                this.sendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMessageOperationCompleted);
            }
            this.InvokeAsync("sendMessage", new object[] {
                        SMSAccount,
                        Pwd,
                        Mobile,
                        Message}, this.sendMessageOperationCompleted, userState);
        }
        
        private void OnsendMessageOperationCompleted(object arg) {
            if ((this.sendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMessageCompleted(this, new sendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WS/receiveMessage", RequestNamespace="WS", ResponseNamespace="WS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMSData[] receiveMessage(string SMSAccount, string SMSPassword) {
            object[] results = this.Invoke("receiveMessage", new object[] {
                        SMSAccount,
                        SMSPassword});
            return ((SMSData[])(results[0]));
        }
        
        /// <remarks/>
        public void receiveMessageAsync(string SMSAccount, string SMSPassword) {
            this.receiveMessageAsync(SMSAccount, SMSPassword, null);
        }
        
        /// <remarks/>
        public void receiveMessageAsync(string SMSAccount, string SMSPassword, object userState) {
            if ((this.receiveMessageOperationCompleted == null)) {
                this.receiveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveMessageOperationCompleted);
            }
            this.InvokeAsync("receiveMessage", new object[] {
                        SMSAccount,
                        SMSPassword}, this.receiveMessageOperationCompleted, userState);
        }
        
        private void OnreceiveMessageOperationCompleted(object arg) {
            if ((this.receiveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveMessageCompleted(this, new receiveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WS/setMessagesStatusToUnread", RequestNamespace="WS", ResponseNamespace="WS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string setMessagesStatusToUnread(string SMSAccount, string SMSPassword) {
            object[] results = this.Invoke("setMessagesStatusToUnread", new object[] {
                        SMSAccount,
                        SMSPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setMessagesStatusToUnreadAsync(string SMSAccount, string SMSPassword) {
            this.setMessagesStatusToUnreadAsync(SMSAccount, SMSPassword, null);
        }
        
        /// <remarks/>
        public void setMessagesStatusToUnreadAsync(string SMSAccount, string SMSPassword, object userState) {
            if ((this.setMessagesStatusToUnreadOperationCompleted == null)) {
                this.setMessagesStatusToUnreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMessagesStatusToUnreadOperationCompleted);
            }
            this.InvokeAsync("setMessagesStatusToUnread", new object[] {
                        SMSAccount,
                        SMSPassword}, this.setMessagesStatusToUnreadOperationCompleted, userState);
        }
        
        private void OnsetMessagesStatusToUnreadOperationCompleted(object arg) {
            if ((this.setMessagesStatusToUnreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMessagesStatusToUnreadCompleted(this, new setMessagesStatusToUnreadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="WS")]
    public partial class SMSData {
        
        private string messageField;
        
        private string originatorField;
        
        private string dateReceivedField;
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        public string DateReceived {
            get {
                return this.dateReceivedField;
            }
            set {
                this.dateReceivedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendMessageCompletedEventHandler(object sender, sendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void receiveMessageCompletedEventHandler(object sender, receiveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMSData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMSData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setMessagesStatusToUnreadCompletedEventHandler(object sender, setMessagesStatusToUnreadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setMessagesStatusToUnreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setMessagesStatusToUnreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591